{"version":3,"sources":["header.png","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Canvas","props","api","fetch","state","lastid","then","response","json","text","setState","this","style","backgroundColor","class","src","header","alt","width","onClick","top","right","position","height","fontSize","color","borderRadius","textAlign","paddingTop","className","marginTop","marginLeft","marginRight","paddingBottom","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,yECA3CD,EAAOC,QAAU,IAA0B,kC,6JCQtBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRC,IAAI,WACFC,MAAM,qCAAqC,EAAKC,MAAMC,QACnDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,IAAIE,EAAO,EAAKL,MAAMK,KACtBA,GAAcF,EAAQ,KACtB,EAAKG,SAAS,CAACD,KAAKA,EAAMJ,OAAQE,EAAQ,SAAa,WAAK,EAAKL,aAtBrE,EAAKE,MAAQ,CACXK,KAAM,oOACNJ,OAAQ,MAJO,E,gEAQE,IAAD,OAClBF,MAAM,sCAAsCQ,KAAKP,MAAMK,MACpDH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GACJ,IAAIE,EAAO,EAAKL,MAAMK,KACtBA,GAAcF,EAAQ,KACtB,EAAKG,SAAS,CAACD,KAAKA,EAAMJ,OAAQE,EAAQ,c,+BAcvC,IAAD,OACN,OACA,yBAAKK,MAAO,CAACC,gBAAgB,YACzB,yBAAKC,MAAM,YACT,yBAAKC,IAAKC,IAAQC,IAAI,SAASL,MAAO,CAACM,MAAO,UAG5C,yBAAKC,QAAS,WAAK,EAAKjB,OAAQU,MAAO,CAACQ,IAAI,GAAIC,MAAM,GAAIR,gBAAiB,UAAWS,SAAS,WAAYJ,MAAO,GAAIK,OAAQ,GAAIC,SAAU,GAAIC,MAAM,QAASC,aAAc,EAAGC,UAAU,SAAUC,WAAY,IAAK,UAGvN,yBAAKC,UAAU,SAASjB,MAAO,CAACkB,UAAW,GAAIZ,MAAO,IAAKa,WAAY,OAAQC,YAAa,OAAQnB,gBAAgB,UAAWW,SAAU,GAAIS,cAAe,MAC1J,yBAAKrB,MAAO,CAACmB,WAAW,GAAIC,YAAa,KACzC,yBAAKH,UAAU,oBAAoBjB,MAAO,CAACgB,WAAY,KACtDjB,KAAKP,MAAMK,a,GA1CYyB,IAAMC,WCItBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.83979260.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.754912fa.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button';\nimport header from './header.png';\n\n\n\nexport default class Canvas extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: '\"King Jaehaerys once told me that madness and greatness are two sides of the same coin. Every time a new Targaryen is born, he said, the gods toss the coin in the air and the world holds its breath to see how it will land.\"\\n',\n      lastid: null\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:5000/next?premise='+this.state.text)\n      .then(response => response.json())\n      .then(response => {\n        let text = this.state.text\n        text = text + response['next']\n        this.setState({text:text, lastid: response['nextid']})\n      });\n  }\n\n  api=()=>{\n    fetch('http://localhost:5000/next?lastid='+this.state.lastid)\n      .then(response => response.json())\n      .then(response => {\n        let text = this.state.text\n        text = text + response['next']\n        this.setState({text:text, lastid: response['nextid']}, ()=>{this.api()})\n      });\n  }\n\n  render(){\n    return (\n    <div style={{backgroundColor:\"#F8F9FA\"}}>\n        <div class=\"relative\">\n          <img src={header} alt=\"header\" style={{width: '100%'}} />\n          {/*<div style={{width:'100%'}}>*/}\n            {/*<Button style={{width: 50, fontSize: 10, position: 'absolute', top:0, right:0, backgroundColor: '#1B73E8'}} onClick={()=>{this.api()}} size=\"sm\" >Next</Button>{' '}*/}\n            <div onClick={()=>{this.api()}} style={{top:16, right:72, backgroundColor: '#235bee', position:'absolute', width: 86, height: 35, fontSize: 15, color:\"white\", borderRadius: 3, textAlign:'center', paddingTop: 5}}>{'Start'}</div>\n          {/*</div>*/}\n        </div>\n          <div className=\"shadow\" style={{marginTop: 10, width: 800, marginLeft: 'auto', marginRight: 'auto', backgroundColor:\"#FFFFFF\", fontSize: 16, paddingBottom: 800 }}>\n            <div style={{marginLeft:50, marginRight: 50}}>\n            <div className=\"display-linebreak\" style={{paddingTop: 60}}>\n            {this.state.text}\n            </div>\n          </div>\n          </div>\n    </div>\n  );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}